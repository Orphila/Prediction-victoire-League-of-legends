# -*- coding: utf-8 -*-
"""Entrainement modèle.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nFqRoFoA_Ta1NXcylHMBmoLDdeUiAJ0N

I/Connection à la bdd et récupération des informations
"""

#!pip install psycopg2
import psycopg2
import pandas as pd

# Informations de connection, je prends soin de ne pas partager les miennes
host = 'xxxxxxxxxxx.rds.amazonaws.com'
port = 5432
database = 'xxxxxx'
user = 'xxxxxx'
password = 'xxxxxxx'


# Création de la connection
conn = psycopg2.connect(host=host,
                        user=user,
                        password=password,
                        port=port)
cur = conn.cursor()

cur.execute("SELECT * FROM DATA_PJT_RITO")
data=cur.fetchall()
data = [list(row) for row in data]

# Conversion des données en int
for i in range(len(data)):
    for j in range(len(data[i])):
          data[i][j]=int(data[i][j])

columns = ['wr_joueur_1',
                           'wr_joueur_2',
                           'wr_joueur_3',
                           'wr_joueur_4',
                           'wr_joueur_5',
                           'wr_joueur_6',
                           'wr_joueur_7',
                           'wr_joueur_8',
                           'wr_joueur_9',
                           'wr_joueur_10',
                           'masteries_joueur_1',
                           'masteries_joueur_2',
                           'masteries_joueur_3',
                           'masteries_joueur_4',
                           'masteries_joueur_5',
                           'masteries_joueur_6',
                           'masteries_joueur_7',
                           'masteries_joueur_8',
                           'masteries_joueur_9',
                           'masteries_joueur_10',
                           'wr équipe bleu',
                           'wr équipe Rouge',
                           'masteries_blue',
                           'mawteries_red' ,
                           'Victoire bleus'
                           ]

# Création du dataframe
df = pd.DataFrame(data, columns=columns)
# Fermeture du curseur
cur.close()
# Fermeture de la connection
conn.close()

"""II/Construction du dataset et importation d'algorithme de classification"""

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier

from sklearn.preprocessing import MinMaxScaler

#Normalisation des données
cols_to_normalize = ['wr_joueur_1',
                           'wr_joueur_2',
                           'wr_joueur_3',
                           'wr_joueur_4',
                           'wr_joueur_5',
                           'wr_joueur_6',
                           'wr_joueur_7',
                           'wr_joueur_8',
                           'wr_joueur_9',
                           'wr_joueur_10',
                           'masteries_joueur_1',
                           'masteries_joueur_2',
                           'masteries_joueur_3',
                           'masteries_joueur_4',
                           'masteries_joueur_5',
                           'masteries_joueur_6',
                           'masteries_joueur_7',
                           'masteries_joueur_8',
                           'masteries_joueur_9',
                           'masteries_joueur_10',
                           'wr équipe bleu',
                           'wr équipe Rouge',
                           'masteries_blue',
                           'mawteries_red' ,
                           ]

scaler = MinMaxScaler()

# Appliquer le scaler aux colonnes sélectionnées
df[cols_to_normalize] = scaler.fit_transform(df[cols_to_normalize])


# Séparer les données en entrée et sortie
X = df.drop('Victoire bleus', axis=1)
y = df['Victoire bleus']

# Diviser les données en données d'entraînement et de test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# Initialiser les modèles
lr = LogisticRegression()
dt = DecisionTreeClassifier()
svc = SVC()
rf = RandomForestClassifier()

"""III/Entrainement des modèles et résultats"""

# Entraîner les modèles sur les données d'entraînement
lr.fit(X_train, y_train)
dt.fit(X_train, y_train)
svc.fit(X_train, y_train)
rf.fit(X_train, y_train)

# Effectuer des prévisions sur les données de test
y_pred_lr = lr.predict(X_test)
y_pred_dt = dt.predict(X_test)
y_pred_svc = svc.predict(X_test)
y_pred_rf = rf.predict(X_test)

# Afficher le taux de réussite de prédiction pour chaque modèle
print("Logistic Regression: ", accuracy_score(y_test, y_pred_lr))
print("Decision Tree: ", accuracy_score(y_test, y_pred_dt))
print("SVC: ", accuracy_score(y_test, y_pred_svc))
print("Random Forest: ", accuracy_score(y_test, y_pred_rf))

"""IV/Création d'une fonction victoire(Invocateur)"""

#On cherche la game en cours, on importe les donnéess voulues, et on  utilise l'algo le plus efficace pour prédie le gagnant
#La prochaine étape dans un autre fichier est d'avoir la possibilité d'utiliser cette fonction sur une interface web
